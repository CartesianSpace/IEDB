''
from Bio import Entrez
import mysql.connector
from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
Entrez.email = "wallalec822@gmail.com"

def isNewSeq(seqL, seq):
    '''seqL is taken as a list of sequence records, while seq = string
    This function is needed because query from iedb returns a list with repeated result'''
    for s in seqL:
        if seq == str(s.seq):
            return False
    return True

def queryIEDB():
    '''return a list of sequenceRecord of ebola epitope'''
    config = {
    'user': 'walec',
    'password': 'sK{jrcT8CGmbh;P7',
    'host': 'iedb-mysql.liai.org',
    'database': 'iedb_query',
    'port': '33306'
    }
    cnx = mysql.connector.connect(**config)
    cursor = cnx.cursor()
    query = '''select source_organism_name, linear_sequence 
    from epitope_list where source_organism_name like "%ebola%";'''
    cursor.execute(query)
    
    l = list()
    for epitope in cursor:
        name = epitope[0]
        seq = epitope[1]
        if(name==None or seq==None or not isNewSeq(l, seq)):
            continue
        seq = Seq(epitope[1])
        seqR = SeqRecord(seq)
        seqR.description = name
        l.append(seqR)
    cursor.close()
    return l

class seqEpitopeLPair():
    '''wrapper of a sequence and a list of epitopes that are on it
    this class is needed so we know which seq has which epitopes'''
    def __init__(self, seq):
        self.epitopeL = list()
        self.seq = seq
    def addEpitope(self, epitope):
        self.epitopeL.append(epitope)

def getConservedEpitope(seqL, epitopeL):
    '''return a list of seqEpitopeLPair'''
    returnL = list()
    for seqRecord in seqL:
        seq = str(seqRecord.seq)
        pair = seqEpitopeLPair(seqRecord)
        for epitope in epitopeL:
            eSeq = str(epitope.seq)
            #if epitope sequences in the input seqeunce, add it to the list in pair
            if eSeq in seq:
                pair.addEpitope(epitope)
        returnL.append(pair)
    return returnL

def UniqueSeqFromSeqL1(seqL1, seqL2):
    '''compare old Ebola sequences before 2015 to Ebola sequences published after 01/01/2015,
    obtain all 'new' sequences
    for our purposes, seqL1 = new list, seqL2 = old list of ebola sequences.'''
    returnL = list()        
    for seqRecord1 in seqL1:
        for seqRecord2 in seqL2:
            seq1 = str(seqRecord1.seq)
            seq2 = str(seqRecord2.seq)
            if seq1 == seq2:
                break
        else:
            #if it never breaks, it is unique and we append it
            returnL.append(seqRecord1)
    return returnL

#2a
#get sequences  after 2015,1,1
handleS = Entrez.esearch(db="protein", term="ebolavirus[ORGN] AND 2015[PDAT]", usehistory="y")
resultS = Entrez.read(handleS)
handleS.close()
 
query_key = resultS["QueryKey"]
webenv = resultS["WebEnv"]
handleF = Entrez.efetch(db = "protein", rettype="fasta", retmode="text", webenv=webenv, query_key=query_key)
newSeqList = SeqIO.parse(handleF, "fasta")
 
newSeqList = list(newSeqList)
print "There are", len(newSeqList), "Sequences in 2015."
SeqIO.write(newSeqList, "Ebola Sequences In 2015.fasta", "fasta")
 
#get old sequences before 2015
handleS = Entrez.esearch(db="protein", term="ebolavirus[ORGN] NOT 2015[PDAT]", usehistory="y")
resultS = Entrez.read(handleS)
handleS.close()
 
query_key = resultS["QueryKey"]
webenv = resultS["WebEnv"]
handleF = Entrez.efetch(db = "protein", rettype="fasta", retmode="text", webenv=webenv, query_key=query_key)
oldSeqList = SeqIO.parse(handleF, "fasta")
oldSeqList = list(oldSeqList)
print "There are", len(oldSeqList), "Sequences before 2015."
SeqIO.write(oldSeqList, "Ebola Sequences Before 2015.fasta", "fasta")

# #testing purposes:
# oldSeqList = list(SeqIO.parse("Ebola Sequences Before 2015.fasta", "fasta"))
# newSeqList = list(SeqIO.parse("Ebola Sequences In 2015.fasta", "fasta"))

#check if the new ones are really new
newSeqList = UniqueSeqFromSeqL1(newSeqList, oldSeqList)
print "Only", len(newSeqList), "are really new."

#2b = collect all known epitope of ebola from iedb
#gets a list of epitope sequence of ebola
epitopeSeqL = queryIEDB()
print "From iedb, we obtain", len(epitopeSeqL), "epitope"
#2c = identify conserved epitope
pairL = getConservedEpitope(newSeqList, epitopeSeqL)
with open('Conserved Epitope.txt', 'w') as f:
    for pair in pairL:
        f.write("----------------------------------------\n")
        f.write("The ebola sequence"+pair.seq.description+"contains the following epitope:\n")
        for epitope in pair.epitopeL:
            f.write(str(epitope.seq))
            f.write("\n")
        f.write("\n")


print "finished"
